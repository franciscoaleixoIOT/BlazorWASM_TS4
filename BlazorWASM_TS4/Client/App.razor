@inject LazyAssemblyLoader AssemblyLoader
@inject ILogger<App> logger

<Router AppAssembly="@typeof(App).Assembly"
        AdditionalAssemblies="@LoadedAssemblies"
        OnNavigateAsync="@OnNavigateAsync"
        PreferExactMatches="@true">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>


@code {
    private List<Assembly> LoadedAssemblies = new List<Assembly>()
    {

    };


    private async Task OnNavigateAsync(NavigationContext context)
    {
        if (context.Path == "sbutton")
        {
            await LerDllDinamica(context.Path, "TesteComponente1");
        }
        else
        if (context.Path == "chart")
        {
            await LerDllDinamica(context.Path, "TesteComponente2");
        }
        else
        if (context.Path == "kanban")
        {
            await LerDllDinamica(context.Path, "TesteComponente3");
        }
        else
        if (context.Path == "diagram")
        {
            await LerDllDinamica(context.Path, "TesteComponente4");
        }
    }

    private async Task LerDllDinamica(string path, string componente)
    {
        string sDllName = componente;
        var assembly = LoadedAssemblies.Find(x => x.GetName().Name == sDllName);
        if (assembly == null)
        {
            try
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(new List<string> { sDllName + ".dll" });
                LoadedAssemblies.AddRange(assemblies);

            }
            catch (Exception ex1)
            {
                logger.LogWarning(ex1, "Erro ao carregar " + componente + "!");

            }
        }
    }
}

